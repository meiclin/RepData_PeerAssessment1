class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
cls_vect
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors, 1:6,)
head(flag_colors[1:6,])
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
sapply(flag_shapes, range)
shap_mat <- sapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(c(3, 4, 5, 5, 5, 6, 6), unique)
unique_vals <- lapply(flags, unique)
unique_vals
length(unique_vals)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flaps2 <- sample(1, 100, prob = 0.7)
flaps2 <- sample(1, 100, replace = TRUE, prob = 0.7)
flap2 <- rbinom(100, size = 1, prob = 0.7)
flap2 <- rbinom(100, 1, 0.7)
flap2 <- rbinom(1, 100, 0.7)
flips2 <- rbinom(100, 1, 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, 100, 25)
rpois(5)
?rpois
rpois(5, lambda = 10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekday(d1)
weekdays(d1)
months(t1)
quarters(t2)
t2 <- strptime("October 17, 1986 08:24")
?strptime
t2 <- strptime("October 17, 1986 08:24", "%Y-%m-%d %H:%M:%S"")
skip()
t2
t2 <- strptime("October 17, 1986 08:24", "%Y-%m-%d %H:%M:%S)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
?plot
plot(x = cars$speed, y = cars$dist, x = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, main = "My Plot")
?plot
plot(cars, sub = "My Plot Subtitle")
?par
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
?points
plot(cars, pch = 2)
data.frame(mtcars)
data(mtcars)
play()
dim(mtcars)
head(mtcars)
names(mtcars)
tail(mtcars)
nxt()
boxplot(mtcars)
?boxplot
boxplot(mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
Sys.Date()
mean(c(2, 4, 5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4, 5, 10))
submit()
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
skip()
exit()
?info
evaluate(c(1.4, 3.6, 7.9, 8.8))
evaluate(c(1.4, 3.6, 7.9, 8.8))
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
submit()
telegram("Hi")
submit()
mad_libs("place", "adjective", "noun")
submit()
submit()
submit()
'I' %p% 'love' %p% 'R!'
library(datasets)
data(iris)
?iris
lapply(virginica, mean)
lapply(Spepal.Length, mean)
apply(Spepal.Length, virginica, mean)
lapply(split(Spepal.Length, virginica), mean)
lapply(split(Sepal.Length, virginica, mean))
lapply(split(Sepal.Length, virginica), mean)
lapply(split('Sepal.Length', 'virginica'), mean)
lapply(split('Sepal.Length', 'virginica', na.rm = TRUE), mean)
lapply(split('Sepal.Length', 'virginica'), mean, na.rm = TRUE)
S <- split(Sepal.Length, Sepal.Length$virginica)
s <- split('Sepal.Length', 'Sepal.Length'$'virginica')
s <- split('Sepal.Length', 'virginica')
lapply(s, mean, na.rm = TRUE)
s<-split(iris, iris$Sepal.Length)
sapply(s, funtion(x) colmeans(x[,c('virginica')]), na.rm = TRUE)
sapply(s, function(x) colMeans(x[,c('virginica')]), na.rm = TRUE)
sapply(s, function(x) colMeans(x[,c('virginica')]))
sapply(s, mean, na.rm = TRUE)
warnings()
sapply(s,mean)
summary(iris)
mean(iris$Sepal.Length)
lapply(split('Sepal.Length', 'virginica'), mean)
mean(Sepal.Length$virginica)
head(iris)
split(Species, virginica)
s <- split(iris, iris$Sepal.Length)
lapply(s, function(x) rowMeans(x[,r('virginica')]))
s <- split(iris, iris$Species)
lapply(s, function(x) colMeans(x[,c('Sepal.Length')]))
lapply(s, mean('Sepal.Length'))
> s <- split(iris, iris$Species)
> lapply(s, function(x) colMeans(x[,c('Sepal.Length', 'Sepal.Width')]))
s <- split(iris, iris$Species)
lapply(s, function(x) colMeans(x[,c('Sepal.Length', 'Sepal.Width')]))
apply(iris, 1, mean)
apply(iris[, 1:4], 2, mean)
colMeans(iris)
apply(iris[, 1:4], 1, mean)
library(datasets)
data(mtcars)
?mtcars
lapply(mtcars, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
apply(mtcars, 2, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
head(mtcars)
debug(ls)
ls
sapply(split(mtcars$hp, mtcars$cyl), mean)
4
20
}
inv
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
}
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(inverse) inv <<- inverse
getinv <- function() inv
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
cacheSolve <- function(x, ...) {
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
mat.data <- x$get()
inv <- solve(mat.data, ...)
x$setinv(inv)
inv
}
x = rbind(c(1, -1/4), c(-1/4, 1))
m$get()
m = makeCacheMatrix(x)
m$get()
x <- makeCacheMatrix()x$set(matrix(1:4, 2, 2))
## > cacheSolve(a)
x <- makeCacheMatrix()
makeCacheMatrix <- function(x = matrix()) {
x <- makeCacheMatrix()
x$set(matrix(1:4, 2, 2))
cacheSolve(x)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(inverse) inv <<- inverse
getinv <- function() inv
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
cacheSolve <- function(x, ...) {
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
mat.data <- x$get()
inv <- solve(mat.data, ...)
x$setinv(inv)
inv
}
x <- makeCacheMatrix()
x$set(matrix(1:4, 2, 2))
cacheSolve(x)
cacheSolve(x)
y <- makeCacheMatrix()
y$set(matrix(1:6, 3, 2))
cacheSolve(y)
y <- makeCacheMatrix()
y$set(matrix(1:9, 3, 3))
cacheSolve(y)
y <- makeCacheMatrix()
y$set(matrix(1:16, 4, 4))
cacheSolve(y)
install.packages('knitr',dependencies=TRUE)
update.packages(ask = FALSE, repos = 'http://cran.rstudio.org')
install.packages('knitr', repos = c('http://yihui.name/xran', 'http://cran.rstudio.org'), type = 'source')
library(knitr)
?knit
set.seed(1)
rpois(5, 2)
outcome <- read.csv("outcome-of-care-measure.csv", colClasses = "character")
outcome <- read.csv("outcome-of-care-measure.csv", colClasses = "character")
ls
cd
ls
load("~/rprog-data-ProgAssignment3-data/outcome-of-care-measures.csv")
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
head(outcome)
ncol(outcome)
nrow(outcome)
names(outcome)
outcome[, 11] <- as.numeric(outcome[, 11])
hist(outcome[, 11])
?as.double
source("best.R")
best("TX", "heart attack")
best("TX", "heart attack")
best("TX", "heart attack")
best("TX", "heart attack")
best("TX", "heart attack")
?which.min
best("TX", "heart attack")
best("TX", "heart attack")
best("TX", "heart attack")
best("TX", "heart attack")
best("TX", "heart attack")
best("TX", "heart attack")
best("TX", "heart attack")
best("TX", "heart attack")
best("TX", "heart attack")
outcome[, 11] <- as.numeric(outcome[, 11])
ist(outcome[, 11])
hist(outcome[, 11])
source("best.R")
source("best.R")
best("TX", "heart attack")
best("AB", "heart attack")
best("TX", "heart attack")
best("TX", "heart attack")
best("TX", "heart failure")
best("TX", "heart failure")
source('~/best.R')
best("TX", "heart failure")
source('~/best.R')
best("TX", "heart failure")
source('~/best.R')
source('~/best.R')
best("TX", "heart failure")
source('~/best.R')
best("TX", "heart failure")
source('~/best.R')
best("TX", "heart failure")
source('~/best.R')
best("TX", "heart failure")
best("TX", "heart attack")
best("MD", "heart attack")
best("MD", "pneumonia")
best("BB", "heart attack")
best("NY", "hert attack")
source('~/best.R')
source('~/best.R')
best("TX", "heart failure")
source('~/rankhospital.R')
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
source('~/rankhospital.R')
rankhospital("TX", "heart failure", 4)
rankhospital("TX", "heart failure", 5)
source('~/rankhospital.R')
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
?split
source('~/rankhospital.R')
rankhospital("TX", "heart failure", 4)
rankhospital("TX", "heart failure", 4)
source('~/rankhospital.R')
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
source(rank
source("rank.R")
rank("TX", "heart failure", 4)
rank("TX", "heart failure", 4)
source('~/rank.R')
rank("TX", "heart failure", 4)
source('~/rank.R')
rank("TX", "heart failure", 4)
source('~/rank.R')
rank("TX", "heart failure", 4)
source('~/rankhospital.R')
rankhospital("TX", "heart failure", 4)
source('~/rankhospital.R')
source("submitscript3.R")
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
2
submit()
submit()
source('~/rankhospital.R')
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
rankhospital("TX", "heart attack", 1)
rankhospital("TX", "heart failure", 1)
rankhospital("MD", "heart attack", 1)
rankhospital("MD", "pneumonia", 1)
source('~/best.R')
source('~/best.R')
best("TX", "heart attack")
best("TX", "heart failure")
source('~/rankhospital.R')
rankhospital("TX", "heart failure", 4)
rankhospital("TX", "heart failure", 1)
rankhospital("MD", "pneumonia", 1)
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
submit()
submit()
submit()
submit()
?levels
source('~/rankhospital.R')
source('~/rankhospital.R')
source('~/rankall.R')
source('~/rankall.R')
head(rankall("heart attack", 20), 10)
source('~/rankall.R')
head(rankall("heart attack", 20), 10)
source('~/rankall.R')
head(rankall("heart attack", 20), 10)
source('~/rankall.R')
head(rankall("heart attack", 20), 10)
source('~/rankforall.R')
source('~/rankforall.R')
head(rankforall("heart attack", 20), 10)
source('~/rankforall.R')
head(rankforall("heart attack", 20), 10)
source('~/rankall.R')
head(rankall("heart attack", 20), 10)
source('~/rankall.R')
head(rankall("heart attack", 20), 10)
source('~/rankall.R')
head(rankall("heart attack", 20), 10)
ail(rankall("pneumonia", "worst"), 3)
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
submit()
submit()
submit()
library(xlsx)
library(xlsx)
sudo apt-get install curl
library(swirl)
install_from_swirl("Exploratory Data Analysis")
install.packages("RMySQL")
library(httr)
require(httpuv)
require(jsonlite)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications
#    Insert your values below - if secret is omitted, it will look it up in
#    the GITHUB_CONSUMER_SECRET environmental variable.
#
#    Use http://localhost:1410 as the callback url
myapp <- oauth_app("quiz2", "ddb0d599de51ccd02f4b", secret="6af1109f6ecf442d292425087d49bb13d9bbe9c8")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
getwd()
instal.packages("plyr")
install.packages("plyr")
getwd()
install.packages("ggplot2"")
install.packages("ggplot2")
getwd()
setwd("/Users/choufaimily/RepData_PeerAssessment1")
knit2html()
install.packages("knitr")
knit2html()
knit2html("PA1_template.Rmd")
knit("PA1_template.Rmd")
library(knitr)
